
%{
fn crossref (ref: string, desc: atext) = let
// <a href=\"\#one2one_chan_create_err\">#dyncode('one2one_chan_create_err')</a> above.
  val __open_beg = atext_strcst ("<a href=\"#")
  val ref = atext_strcst (ref)
  val __open_end = atext_strcst ("\">")
  val __end = atext_strcst ("</a>")
in
  atext_apptxt3(atext_apptxt3 (__open_beg, ref, __open_end), desc, __end)
end // end of [pats2xhtmld]



%}


#decltitle("\
ATSLIB/contrib/cspats
")

================================================================================

#declpreamble("\
This package contains some common functions for Process Oriented Programming style.
")

================================================================================

#declnamesynop("one2one_chan_in")
#declsynop2("\
#para('\

This is the type for the read end of an one-to-one channel. It\'s full name is
is #stacode("one2one_chan_in_vt0ype_int"), which is an abstract boxed linear datatype \
(viewtype) declared as follows:

#pats2xhtmls('\
absviewtype // viewt@ype: invariant
one2one_chan_in_vt0ype_int (a:viewt@ype, tag: int)

stadef one2one_chan_in = one2one_chan_in_vt0ype_int
') #comment("end of pats2xhtmls")
') #comment("end of para")
") 

#decldescrpt("\
Since it's the read end of an one-to-one channel, there's no function for duplicating \
instance of this type.
")

================================================================================

#declnamesynop("one2one_chan_out")
#declsynop2("\
#para('\

This is the type for the write end of an one-to-one channel. It\'s full name is
is #stacode("one2one_chan_out_vt0ype_int"), which is an abstract boxed linear datatype \
(viewtype) declared as follows:

#pats2xhtmls('\
absviewtype // viewt@ype: incovariant
one2one_chan_out_vt0ype_int (a:viewt@ype, tag: int)

stadef one2one_chan_out = one2one_chan_out_vt0ype_int
') #comment("end of pats2xhtmls")
') #comment("end of para")
") 

#decldescrpt("\
Since it's the write end of an one-to-one channel, there's no function for duplicating \
instance of this type.
")

================================================================================

#declnamesynop("one2one_chan")
#declsynop2("\
#para('\

This is the type for an one-to-one channel. It\'s full name is
is #stacode("one2one_chan_vt0ype_int"), which is an abstract boxed linear datatype \
(viewtype) declared as follows:


#pats2xhtmls('\
dataviewtype // viewt@ype: invariant
  one2one_chan_vt0ype_int (a:viewt@ype, int) = 
| {tag:int} one2one_pair (a, tag) of (
  one2one_chan_in (a, tag), one2one_chan_out (a, tag))
// end of [one2one_chan_vt0ype_int]

stadef one2one_chan = one2one_chan_vt0ype_int
') #comment("end of pats2xhtmls")
') #comment("end of para")
") 

#decldescrpt("\
A channel is a linear object. There's no function for duplicating instance of this type.
")

================================================================================

#declnamesynop("one2one_chan_create")

#decldescrpt("\
This function creates an one-to-one channel, from which we can get the \
read and write ends for communication. This function has no indication \
of error when creating the new channel. It simply terminates the whole \
program.
")
#declexample("\
#pats2xhtmld('\
val ch = one2one_chan_create {int} ()
val+ ~one2one_pair (ch_in, ch_out) = ch
')
")

================================================================================

#declnamesynop("one2one_chan_create_err")

#decldescrpt("\
This function creates an one-to-one channel, from which we can get the \
read and write ends for communication. This function returns 0 when \
succeeds, otherwise return non-zero.
")
#declexample("\
#pats2xhtmld('\
staload "cspats/SATS/cspats.sats"
staload _ = "cspats/DATS/cspats.dats"

implement main () = let
  var ch: one2one_chan (int) ?
  val ret = one2one_chan_create_err {int} (ch)
in
  if ret = 0 then let
    (* Channel is created successfully. *)
    prval () = opt_unsome ch
    val+ ~one2one_pair (ch_in, ch_out) = ch

    (* Destroy the channel before the program exits. *)
    val () = one2one_chan_in_destroy (ch_in)
    val () = one2one_chan_out_destroy (ch_out)
  in end else let
    prval () = opt_unnone ch
  in end
end

')
")

================================================================================

#declnamesynop("one2one_chan_in_destroy")

#decldescrpt("\
This function releases the read end of an one-to-one channel.
")
#declexample("\
Refer to the example of function \
#crossref("one2one_chan_create_err", #dyncode('one2one_chan_create_err')) above.
")

================================================================================

#declnamesynop("one2one_chan_out_destroy")

#decldescrpt("\
This function releases the write end of an one-to-one channel.
")
#declexample("\
Refer to the example of function \
#crossref("one2one_chan_create_err", #dyncode('one2one_chan_create_err')) above.
")

================================================================================

#declnamesynop("one2one_chan_in_read")

#decldescrpt("\
This function reads data from the read end of an one-to-one channel. \
The read operation is blocked until synchronized with the write operation \
at the write end of the channel. #dyncode('one2one_chan_in_read') is actually \
a function template. It's a good practice to specify the template parameter \
while invoking the function, though ATS compiler can figure out the appropriate \
parameters in most cases.
")

#declexample("\
#pats2xhtmld('\
fun read_int_chan (chin: !one2one_chan_in int): void = let
  var x: int?
  val () = one2one_chan_in_read<int> (chin, x)
  val () = printf ("read an int: %d\\\n", @(x))
in end
')
")

================================================================================

#declnamesynop("one2one_chan_in_read_tsz")

#decldescrpt("\
This function reads data from the read end of an one-to-one channel. \
The read operation is blocked until synchronized with the write operation \
at the write end of the channel. Function parameter #dyncode('tsz') is the \
size of the data being read.
")

#declexample("\
#pats2xhtmld('\
fun read_int_chan_tsz (chin: !one2one_chan_in int): void = let
  var x: int?
  val () = one2one_chan_in_read_tsz (chin, x, sizeof<int>)
  val () = printf ("read an int: %d\\\n", @(x))
in end
')
")

================================================================================

#declnamesynop("one2one_chan_out_write")

#decldescrpt("\
This function writes data to the write end of an one-to-one channel. \
The write operation is blocked until synchronized with the read operation \
at the read end of the channel.
")

#declexample("\
#pats2xhtmld('\
fun write_int_chan (chout: !one2one_chan_out int): void = let
  var x: int = 0
  val () = printf ("write an int: %d\\\n", @(x))
  val () = one2one_chan_out_write (chout, x)
in end
')
")

================================================================================

#declnamesynop("many2one_chan_in")
#declsynop2("\
#para('\

This is the type for the read end of an many-to-one channel. It\'s full name is
is #stacode("many2one_chan_in_vt0ype_int"), which is an abstract boxed linear datatype \
(viewtype) declared as follows:

#pats2xhtmls('\
absviewtype // viewt@ype: invariant
many2one_chan_in_vt0ype_int (a:viewt@ype, tag:int)

stadef many2one_chan_in = many2one_chan_in_vt0ype_int
') #comment("end of pats2xhtmls")
') #comment("end of para")
") 

#decldescrpt("\
Since it's the read end of an many-to-one channel, there's no function for duplicating \
instance of this type.
")

================================================================================

#declnamesynop("many2one_chan_out")
#declsynop2("\
#para('\

This is the type for the write end of an many-to-one channel. It\'s full name is
is #stacode("many2one_chan_out_vt0ype_int"), which is an abstract boxed linear datatype \
(viewtype) declared as follows:

#pats2xhtmls('\
absviewtype // viewt@ype: incovariant
many2one_chan_out_vt0ype_int (a:viewt@ype, tag:int)

stadef many2one_chan_out = many2one_chan_out_vt0ype_int
') #comment("end of pats2xhtmls")
') #comment("end of para")
") 

#decldescrpt("\
This is the type of the write end of an one-to-one channel. Instance of such \
type can be duplicated via function \
#crossref("many2one_chan_out_ref", #dyncode('many2one_chan_out_ref')).
")

================================================================================

#declnamesynop("many2one_chan")
#declsynop2("\
#para('\

This is the type for an many-to-one channel. It\'s full name is
is #stacode("many2one_chan_vt0ype_int"), which is an abstract boxed \
linear datatype (viewtype) declared as follows:

#pats2xhtmls('\
dataviewtype // viewt@ype: invariant
  many2one_chan_vt0ype_int (a:viewt@ype, int) = 
| {tag:int} many2one_pair (a, tag) of (
  many2one_chan_in (a, tag), many2one_chan_out (a, tag))
// end of [many2one_chan_vt0ype_int]

stadef many2one_chan = many2one_chan_vt0ype_int
') #comment("end of pats2xhtmls")
') #comment("end of para")
") 

#decldescrpt("\
A channel is a linear object. There's no function for duplicating instance of this type.
")

================================================================================

#declnamesynop("many2one_chan_create")

#decldescrpt("\
This function creates an many-to-one channel, from which we can get the \
read and write ends for communication. This function has no indication \
of error when creating the new channel. It simply terminates the whole \
program.
")
#declexample("\
#pats2xhtmld('\
val ch = many2one_chan_create {int} ()
val+ ~many2one_pair (ch_in, ch_out) = ch
')
")

================================================================================

#declnamesynop("many2one_chan_create_err")

#decldescrpt("\
This function creates an many-to-one channel, from which we can get the \
read and write ends for communication. This function returns 0 when \
succeeds, otherwise return non-zero.
")
#declexample("\
#pats2xhtmld('\
staload "cspats/SATS/cspats.sats"
staload _ = "cspats/DATS/cspats.dats"

implement main (): void = let
  var ch: many2one_chan (int) ?
  val ret = many2one_chan_create_err {int} (ch)
in
  if ret = 0 then let
    (* Channel is created successfully. *)
    prval () = opt_unsome ch
    val+ ~many2one_pair (ch_in, ch_out) = ch
  
    (* Destroy the channel before the program exits. *)
    val () = many2one_chan_in_destroy (ch_in)
    val () = many2one_chan_out_unref (ch_out)
  in end else let
    prval () = opt_unnone ch
  in end
end

')
")

================================================================================

#declnamesynop("many2one_chan_in_destroy")

#decldescrpt("\
This function releases the read end of an many-to-one channel.
")
#declexample("\
Refer to the example of function \
#crossref("many2one_chan_create_err", #dyncode('many2one_chan_create_err')) above.
")

================================================================================

#declnamesynop("many2one_chan_out_unref")

#decldescrpt("\
This function releases the write end of an many-to-one channel.
")
#declexample("\
Refer to the example of function \
#crossref("many2one_chan_create_err", #dyncode('many2one_chan_create_err')) above.
")

================================================================================

#declnamesynop("many2one_chan_out_ref")

#decldescrpt("\
This function duplicates the write end of an many-to-one channel.
")

================================================================================

#declnamesynop("many2one_chan_in_read")

#decldescrpt("\
This function reads data from the read end of an many-to-one channel. \
The read operation is blocked until synchronized with the write operation \
at the write end of the channel. #dyncode('many2one_chan_in_read') is actually \
a function template. It's a good practice to specify the template parameter \
while invoking the function, though ATS compiler can figure out the appropriate \
parameters in most cases. 

If there is more than one write operation blocked \
at the write end, only one of them gets synchronized with the read \
operation. The other write opreations still get blocked until further \
read operation occurrs.
")

#declexample("\
#pats2xhtmld('\
fun read_int_chan (chin: !many2one_chan_in int): void = let
  var x: int?
  val () = many2one_chan_in_read<int> (chin, x)
  val () = printf ("read an int: %d\\\n", @(x))
in end
')
")

================================================================================

#declnamesynop("many2one_chan_in_cond_read")
todo

#decldescrpt("\
This function reads data from the read end of an many-to-one channel. \
The read operation is blocked until synchronized with the write operation \
at the write end of the channel. #dyncode('many2one_chan_in_read') is actually \
a function template. It's a good practice to specify the template parameter \
while invoking the function, though ATS compiler can figure out the appropriate \
parameters in most cases. 

If there is more than one write operation blocked \
at the write end, only one of them gets synchronized with the read \
operation. The other write opreations still get blocked until further \
read operation occurrs.
")

#declexample("\
#pats2xhtmld('\
fun cond_read_int_chan (chin: !many2one_chan_in int): void = let
  var x: int?
  val () = many2one_chan_in_read<int> (chin, x)
  val () = printf ("read an int: %d\\\n", @(x))
in end
')
")

================================================================================
#declnamesynop("one2one_chan_in_read_tsz")

#decldescrpt("\
This function reads data from the read end of an many-to-one channel. \
The read operation is blocked until synchronized with the write operation \
at the write end of the channel. Function parameter #dyncode('tsz') is the \
size of the data being read.

If there is more than one write operation blocked \
at the write end, only one of them gets synchronized with the read \
operation. The other write opreations still get blocked until further \
read operation occurrs.
")

#declexample("\
#pats2xhtmld('\
fun read_int_chan_tsz (chin: !many2one_chan_in int): void = let
  var x: int?
  val () = many2one_chan_in_read_tsz (chin, x, sizeof<int>)
  val () = printf ("read an int: %d\\\n", @(x))
in end
')
")

================================================================================

#declnamesynop("many2one_chan_out_write")

#decldescrpt("\
This function writes data to the write end of an many-to-one channel. \
The write operation is blocked until synchronized with the read operation \
at the read end of the channel.
")

#declexample("\
#pats2xhtmld('\
fun write_int_chan (chout: !many2one_chan_out int): void = let
  var x: int = 0
  val () = printf ("write an int: %d\\\n", @(x))
  val () = many2one_chan_out_write (chout, x)
in end
')
")

================================================================================

#declexample("\

The following code implements a function that combines two given
linear option-values into a single one:

#pats2xhtmld_tryit('\
fun{
a1,a2:t0p
} option_vt_zip {b1,b2:bool} (
  opt1: option_vt (a1, b1), opt2: option_vt (a2, b2)
) : option_vt (@(a1, a2), b1*b2) =
  case+ opt1 of
  | ~Some_vt (x1) => (
    case+ opt2 of
    | ~Some_vt (x2) => Some_vt @(x1, x2) | ~None_vt () => None_vt ()
    )
  | ~None_vt () => let
      val () = option_vt_free (opt2) in None_vt ()
    end // end of [None_vt]
// end of [option_vt_zip]
')
")


