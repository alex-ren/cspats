--atm.csp: Created by Stephen Doxsee, March 9, 2005

--/////////////
--Channels
--/////////////

channel anothertrans, approved, badcard, cancel, commit, ejectcard, endtrans, exceedsMch, holdingcard, insertcard, insertcard_i, insertenv, invalidPIN, notapproved, notcancel
channel off, on, receipt, rollback, sameacct, sessiondone, startenv
channel banksend, checkdata: choices.integers.integers.integers.integers.integers.integers

channel bankstatus, reportdata: integers.integers.integers.integers

channel again, amntget, amntset, balget, balset, cardget, cardset, dispense, display, getacct, getamnt, getfrom, getto, machcash, machget, machset, pinget, pinset, readcard, readnewpin, readpin, request : integers

channel choose, choose_i: choices

--/////////////
--Types
--/////////////

nametype integers = {0..2}

nametype choices = {1..4}

--/////////////
--We use variables in this way to avoid passing large amounts of information as parameters to processes
--/////////////

VARIABLES = AMNTi ||| BALi ||| CARDi ||| MACHi ||| PINi 

AMNTi = amntset?x -> AMNT(x)
AMNT(val) = amntset?x -> AMNT(x) 
	[] amntget!val -> AMNT(val)
 
BALi = balset?x -> BAL(x) 
BAL(val) = balset?x -> BAL(x)
        [] balget!val -> BAL(val)

CARDi = cardset?x -> CARD(x)
CARD(val) = cardset?x -> CARD(x)
        [] cardget!val -> CARD(val)

MACHi = machset?x -> MACH(x)
MACH(val) = machset?x -> MACH(x)
        [] machget!val -> MACH(val)

PINi = pinset?x -> PIN(x)
PIN(val) = pinset?x -> PIN(x) 
	[] pinget!val -> PIN(val)

--//////////////////
-- OVERALL: State machine that models the overall system behaviour
--//////////////////

OVERALL = OFF

OFF = on -> machcash?cash -> machset!cash -> IDLE

-- insertcard synchronizes with session (insertc is a workaround to allow a third process to synchronize)

IDLE = insertcard -> insertcard_i -> SERVING
	[] off -> OFF

SERVING = sessiondone -> IDLE

--//////////////////
-- SESSION: State machine that models a session
--//////////////////

SESSION = insertcard_i -> READINGCARD

READINGCARD = readcard?c -> (cardset!c -> READINGPIN)
	[] badcard -> EJECT

READINGPIN = readpin?p -> (pinset!p -> CHOOSING)
	[] cancel -> EJECT

CHOOSING = choose?menu -> (choose_i!menu -> TRANS)
	[] cancel -> EJECT

TRANS = endtrans -> EJECT
	[] anothertrans -> CHOOSING
	[] holdingcard -> DONE

EJECT = ejectcard -> DONE

DONE = sessiondone -> SESSION

--//////////////////
-- TRANSACTION: State machine that models a transaction
--//////////////////

TRANSACTION = choose_i?menu -> SPECIFICS(menu)

--// WITHDRAWL
SPECIFICS(1) = 
	(getacct?account -> 
	(getamnt?amount -> (amntset!amount -> SEND(1,account,1,1,amount) )
	[] cancel -> ANOTHER)
	[] cancel -> ANOTHER) -- withdraw

--// TRANSFER
SPECIFICS(2) = 
	(getfrom?f ->
	(getto?t -> 
	if (f == t) then sameacct -> SPECIFICS(2) 
	else (getamnt?a -> (amntset!a -> SEND(2,1,f,t,a) )
	[] cancel -> ANOTHER)
	[] cancel -> ANOTHER)
	[] cancel -> ANOTHER)  -- transfer

-- provide timeout for envelope!!!!
--// DEPOSITS
SPECIFICS(3) = 
	(getacct?account ->
	(getamnt?amount -> (amntset!amount -> SEND(3,account,1,1,amount) )
	[] cancel -> ANOTHER)
	[] cancel -> ANOTHER) -- deposit

--// ACCOUNT BALANCE
SPECIFICS(4) = 
	(getacct?account -> SEND(4,account,1,1,0)
	[] cancel -> ANOTHER) -- info

SEND(m,account,from,to,amount) = cardget?c -> pinget?p -> banksend!m.c.p.account.from.to.amount -> RECEIVE(m)

--// get response from bank on what was requested
-- try sending information to bank to see if transaction is ok
-- bankstatus (WITHDRAW)
-- 	approvedstat == 0 means not approved
-- 	pinstat == 0 means invalid PIN
RECEIVE(menu) = bankstatus?approvedstat.pinstat.pin.val -> 
	(if (pinstat == 0) then invalidPIN -> HANDLEPIN(menu,approvedstat,pin,val,1) 
	else if (approvedstat != 0) then approved -> COMPLETING(menu,val) 
	else rollback -> ANOTHER)

--// 3 unsuccessful pin entries -> hold the card in machine
HANDLEPIN(m,approvedstat,realpin,val,attempt) = 
	if( attempt >= 3 ) then 
		rollback -> holdingcard -> TRANSACTION
	else
		readnewpin?p -> pinset!p ->
		if( p == realpin ) then (if( approvedstat != 0 ) then approved -> COMPLETING(m,val) else rollback -> ANOTHER)
		else invalidPIN -> HANDLEPIN(m,approvedstat,realpin,val,attempt+1)

--// check to see if the machine has the money required
COMPLETING(1,balance) = machget?m -> amntget?amount -> 
	if (m >= amount) then 
		commit -> machset!m-amount -> dispense!amount -> RECEIPT 
	else rollback -> exceedsMch -> ANOTHER

COMPLETING(2,v) = commit -> RECEIPT

COMPLETING(3,v) = startenv -> 
	(insertenv -> (commit -> RECEIPT)
	[] cancel -> (rollback -> ANOTHER))

COMPLETING(4,balance) = commit -> display!balance -> RECEIPT

RECEIPT = receipt -> ANOTHER

--// more transactions or exit
ANOTHER = again?x -> 
			if( x == 1 ) then anothertrans -> TRANSACTION 
			else endtrans -> TRANSACTION

--//////////////////
-- ATM: This models the ATM
--//////////////////

ATM = ((OVERALL 
	[|{|insertcard_i,sessiondone|}|] SESSION )
	[|{|choose_i,endtrans,anothertrans,holdingcard|}|] TRANSACTION) 
	[|{|cardset,cardget,pinset,pinget,machset,machget,balset,balget,amntset,amntget|}|] VARIABLES


--//////////////////
-- SYS: This models the entire system
--//////////////////

--SYS = ((ATM 
--	[|{|banksend,bankstatus, commit|}|] BANK) 
--	[|{|insertcard,readcard,readpin,choose,getacct,getamnt,dispense,again,badcard,cancel|}|] CLIENT )
--	[|{|on,machcash,off|}|] OPERATOR

SYS = ATM [|{|on,off|}|] OPERATOR

--//////////////////
-- BANK: This models the bank's interface to the ATM
-- bankstatus is status (badpin,approved,other), pin, value (return value of some kind)
--//////////////////

BANK = banksend?inq.c.p.account.t.f.amount -> checkdata!inq.c.p.account.t.f.amount -> reportdata?w.x.y.z -> bankstatus!w.x.y.z -> 
	if( inq == 3) then commit -> BANK 
	else BANK

--OPERATOR = on -> machcash!2 -> off -> OPERATOR
OPERATOR = on -> off -> OPERATOR

--//////////////////
-- CLIENT: This models a client using the ATM
--//////////////////

CLIENT = insertcard -> readcard!1 -> readpin!1 -> choose!1 -> getacct!1 -> getamnt!2 -> dispense?a -> again!0 -> SKIP

--//////////////////
-- This is the formal verification section
--//////////////////


-- if you get 3 invalidPIN messages without starting a new transaction, your card should be held
assert ATM \ diff(Events,{|invalidPIN, again, receipt, holdingcard|}) [T= invalidPIN -> invalidPIN -> invalidPIN -> holdingcard -> STOP

-- should fail since a receipt can't be issued after 3 invalid pins in one session
assert ATM \ diff(Events,{|invalidPIN, again, receipt, holdingcard|}) [T= invalidPIN -> invalidPIN -> invalidPIN -> receipt -> STOP

P = on -> machcash?x -> off -> P
assert P [F= ATM \ diff(Events,{|on, off,machcash|})

assert ATM \ diff(Events,{|readcard, readpin, insertcard|}) [T= insertcard -> readcard?x -> readpin?x -> STOP

--W = readcard?x -> readpin?y -> bankstatus.1?pin.val -> invalidPIN
assert ATM \ diff(Events,{|readcard, readpin, bankstatus.1, invalidPIN|}) [T= insertcard -> readcard?x -> readpin?x -> STOP


assert OVERALL :[deadlock free [F]]
assert OVERALL :[livelock free [F]]
assert OVERALL :[deterministic [F]]
assert SESSION :[deadlock free [F]]
assert SESSION :[livelock free [F]]
assert SESSION :[deterministic [F]]
assert TRANSACTION :[deadlock free [F]]
assert TRANSACTION :[livelock free [F]]
assert TRANSACTION :[deterministic [F]]
assert ATM :[deadlock free [F]]
assert ATM :[livelock free [F]]
assert ATM :[deterministic [F]]
